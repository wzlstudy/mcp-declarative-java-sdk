{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to mcp-declarative-java-sdk","text":"<p><code>mcp-declarative-java-sdk</code> is an annotation-driven MCP (Model Context Protocol) Java SDK, which is based on the native MCP Java SDK from official team. It provides an easier way to define MCP resources, prompts, and tools using Java annotations if you don't want to use the heavyweight Spring AI Framework.</p>"},{"location":"#why-was-it-born","title":"Why was it born?","text":"<p>MCP helps you build agents and complex workflows on top of LLMs. However, the official Java SDK is harder to use because its underlying implementation is more focused on the protocol's core layer. Creating your MCP server requires writing more repetitive low-level code unless you use the Spring AI Framework. But sometimes, we may simply need a lightweight development solution, that's why this project was born.</p>"},{"location":"#what-it-can-bring","title":"What it can bring?","text":"<p>\ud83d\udeab No Spring Framework Required.</p> <p>\u26a1  Instant MCP Java server in 1 LOC.</p> <p>\ud83c\udf89 No need to write more SDK low-level code.</p> <p>\ud83d\udc4f Get rid of complex and lengthy JSON schema definitions.</p> <p>\ud83c\udfaf Just focus on your core logic (resources/prompts/tools).</p> <p>\ud83d\udd0c Configuration file compatible with the Spring AI Framework.</p> <p>\ud83c\udf0d Built-in multi-languages support for MCP server (resources/prompts/tools).</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#requirements","title":"Requirements","text":"<p>\ud83d\udd12 Java 17 or later (Restricted by MCP Java SDK)</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>Add the following Maven dependency to your project:</p> <pre><code>&lt;!-- Internally relies on native MCP Java SDK 0.12.1 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;io.github.codeboyzhou&lt;/groupId&gt;\n    &lt;artifactId&gt;mcp-declarative-java-sdk&lt;/artifactId&gt;\n    &lt;version&gt;0.8.2&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"getting-started/#mcp-server","title":"MCP Server","text":"<p>Now you can create a simple MCP server with just one line of core code.</p>"},{"location":"getting-started/#stdio-server","title":"Stdio Server","text":""},{"location":"getting-started/#quick-start","title":"Quick Start","text":"<pre><code>import com.github.codeboyzhou.mcp.declarative.McpServers;\nimport com.github.codeboyzhou.mcp.declarative.annotation.McpI18nEnabled;\nimport com.github.codeboyzhou.mcp.declarative.annotation.McpServerApplication;\nimport com.github.codeboyzhou.mcp.declarative.server.McpServerInfo;\n\n@McpI18nEnabled\n@McpServerApplication\npublic class McpStdioServer {\n\n  public static void main(String[] args) {\n    McpServers.run(McpStdioServer.class, args).startStdioServer(McpServerInfo.builder().build());\n  }\n\n}\n</code></pre> <p>In the sample code above, we created a simple MCP server, which is based on the stdio transport mode. <code>@McpServerApplication</code> is a convenience annotation that helps to locate the package path of MCP server components, such as resources, prompts, and tools.</p> <p>You can also explicitly specify the package path to scan, either of the two ways below is sufficient:</p> <pre><code>@McpServerApplication(basePackageClass = McpStdioServer.class)\n</code></pre> <pre><code>@McpServerApplication(basePackage = \"com.github.codeboyzhou.mcp.server.examples\")\n</code></pre> <p>If you don't specify the package path, the annotation will scan the package where the main method is located.</p>"},{"location":"getting-started/#server-info","title":"Server Info","text":"<p>In addition, for the method <code>startStdioServer</code>, you need to provide a <code>McpServerInfo</code> object, which contains the basic information of the MCP server, such as name, version, and instructions, etc.</p> <p>The following is all the field information about class <code>McpServerInfo</code>:</p> Field Type Description Default Value <code>name</code> String The name of the MCP server <code>mcp-server</code> <code>version</code> String The version of the MCP server <code>1.0.0</code> <code>instructions</code> String The instructions of the MCP server (empty string) <code>requestTimeout</code> Duration The timeout of the MCP server request <code>20</code> seconds"},{"location":"getting-started/#how-to-run","title":"How to run","text":"<p>For a MCP stdio server to run, you need to package your project into an executable jar file.</p> <p>There is a Maven plugin that can handle this, just place the following configuration into your root <code>pom.xml</code>:</p> <pre><code>&lt;plugins&gt;\n  &lt;!-- Your other plugins ... --&gt;\n  &lt;plugin&gt;\n    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n    &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;\n    &lt;version&gt;${maven-shade-plugin.version}&lt;/version&gt;\n    &lt;executions&gt;\n      &lt;execution&gt;\n        &lt;goals&gt;\n          &lt;goal&gt;shade&lt;/goal&gt;\n        &lt;/goals&gt;\n        &lt;phase&gt;package&lt;/phase&gt;\n        &lt;configuration&gt;\n          &lt;transformers&gt;\n            &lt;transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\"&gt;\n              &lt;mainClass&gt;com.github.codeboyzhou.mcp.server.examples.McpStdioServer&lt;/mainClass&gt;\n            &lt;/transformer&gt;\n          &lt;/transformers&gt;\n        &lt;/configuration&gt;\n      &lt;/execution&gt;\n    &lt;/executions&gt;\n  &lt;/plugin&gt;\n&lt;/plugins&gt;\n</code></pre>"},{"location":"getting-started/#http-sse-server-deprecated","title":"HTTP SSE Server (Deprecated)","text":""},{"location":"getting-started/#quick-start_1","title":"Quick Start","text":"<pre><code>import com.github.codeboyzhou.mcp.declarative.McpServers;\nimport com.github.codeboyzhou.mcp.declarative.annotation.McpI18nEnabled;\nimport com.github.codeboyzhou.mcp.declarative.annotation.McpServerApplication;\nimport com.github.codeboyzhou.mcp.declarative.server.McpSseServerInfo;\n\n@McpI18nEnabled\n@McpServerApplication\npublic class McpSseServer {\n\n  public static void main(String[] args) {\n    McpServers.run(McpSseServer.class, args).startSseServer(McpSseServerInfo.builder().build());\n  }\n\n}\n</code></pre>"},{"location":"getting-started/#server-info_1","title":"Server Info","text":"<p>For the method <code>startSseServer</code>, you can specify the server information by using <code>McpSseServerInfo</code>:</p> Field Type Description Default Value <code>name</code> String The name of the MCP server <code>mcp-server</code> <code>version</code> String The version of the MCP server <code>1.0.0</code> <code>instructions</code> String The instructions of the MCP server (empty string) <code>requestTimeout</code> Duration The timeout of the MCP server request <code>20</code> seconds <code>baseUrl</code> String The base URL of the MCP server (empty string) <code>messageEndpoint</code> String The endpoint of the MCP server message <code>/mcp/message</code> <code>sseEndpoint</code> String The endpoint for HTTP SSE mode <code>/sse</code> <code>port</code> int The port for HTTP Server <code>8080</code>"},{"location":"getting-started/#how-to-run_1","title":"How to run","text":"<p>Just run the main class like you would launch a web application, and then it's all set.</p>"},{"location":"getting-started/#streamable-http-server","title":"Streamable HTTP Server","text":""},{"location":"getting-started/#quick-start_2","title":"Quick Start","text":"<pre><code>import com.github.codeboyzhou.mcp.declarative.McpServers;\nimport com.github.codeboyzhou.mcp.declarative.annotation.McpI18nEnabled;\nimport com.github.codeboyzhou.mcp.declarative.annotation.McpServerApplication;\nimport com.github.codeboyzhou.mcp.declarative.server.McpStreamableServerInfo;\n\n@McpI18nEnabled\n@McpServerApplication\npublic class McpStreamableServer {\n\n  public static void main(String[] args) {\n    McpStreamableServerInfo serverInfo = McpStreamableServerInfo.builder().build();\n    McpServers.run(McpStreamableServer.class, args).startStreamableServer(serverInfo);\n  }\n\n}\n</code></pre>"},{"location":"getting-started/#server-info_2","title":"Server Info","text":"<p>For the method <code>startStreamableServer</code>, you can specify the server information by using <code>McpStreamableServerInfo</code>:</p> Field Type Description Default Value <code>name</code> String The name of the MCP server <code>mcp-server</code> <code>version</code> String The version of the MCP server <code>1.0.0</code> <code>instructions</code> String The instructions of the MCP server (empty string) <code>requestTimeout</code> Duration The timeout of the MCP server request <code>20</code> seconds <code>mcpEndpoint</code> String The endpoint of the MCP server message <code>/mcp</code> <code>disallowDelete</code> boolean Whether to disable the DELETE method of HTTP <code>false</code> <code>keepAliveInterval</code> Duration The interval for keep-alive pings. No keep-alive will be scheduled if <code>null</code> <code>null</code> <code>port</code> int The port for HTTP server <code>8080</code>"},{"location":"getting-started/#how-to-run_2","title":"How to run","text":"<p>Just run the main class like you would launch a web application, and then it's all set.</p>"},{"location":"getting-started/#mcp-component","title":"MCP Component","text":"<p>In the previous section, we have learned how to create a MCP server, but the server still has no usable components, like MCP resources, prompts, and tools. In this section, we will learn how to create MCP components easily with the support of this high-level SDK. Refer to the following sample code, just focus on your core logic, forget about the low-level details of native MCP Java SDK.</p>"},{"location":"getting-started/#resource","title":"Resource","text":"<pre><code>import com.github.codeboyzhou.mcp.declarative.annotation.McpResource;\n\npublic class McpResources {\n\n  /**\n   * This method defines a MCP resource to expose the OS env variables.\n   */\n  @McpResource(uri = \"system://env\", description = \"OS env variables\")\n  public String getSystemEnv() {\n    // Just put your logic code here, forget about the native MCP SDK details.\n    return System.getenv().toString();\n  }\n\n  // Your other MCP resources here...\n}\n</code></pre>"},{"location":"getting-started/#prompt","title":"Prompt","text":"<pre><code>import com.github.codeboyzhou.mcp.declarative.annotation.McpPrompt;\nimport com.github.codeboyzhou.mcp.declarative.annotation.McpPromptParam;\n\npublic class McpPrompts {\n\n  /**\n   * This method defines a MCP prompt to read a file.\n   */\n  @McpPrompt(description = \"A simple prompt to read a file\")\n  public String readFile(@McpPromptParam(name = \"path\", description = \"filepath\", required = true) String path) {\n    // Just put your logic code here, forget about the native MCP SDK details.\n    return String.format(\"What is the complete contents of the file: %s\", path);\n  }\n\n  // Your other MCP prompts here...\n}\n</code></pre>"},{"location":"getting-started/#tool","title":"Tool","text":"<pre><code>import com.github.codeboyzhou.mcp.declarative.annotation.McpTool;\nimport com.github.codeboyzhou.mcp.declarative.annotation.McpToolParam;\n\npublic class McpTools {\n\n  /**\n   * This method defines a MCP tool to read a file.\n   */\n  @McpTool(description = \"Read complete file contents with UTF-8 encoding\")\n  public String readFile(@McpToolParam(name = \"path\", description = \"filepath\", required = true) String path) {\n    // Just put your logic code here, forget about the native MCP SDK details.\n    return Files.readString(Path.of(path));\n  }\n\n  // Your other MCP tools here...\n}\n</code></pre> <p>Now it's all set, all you have to do is run your MCP server, and all the resources, prompts, and tools will be registered automatically.</p>"}]}